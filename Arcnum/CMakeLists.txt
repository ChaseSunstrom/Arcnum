cmake_minimum_required(VERSION 3.15)
project(Arcnum VERSION 0.1.0)

# Generated by CBuild - Do not edit manually

# Helper function to expand glob patterns and verify sources exist
function(verify_sources_exist pattern_list output_var)
  set(expanded_sources)
  foreach(pattern ${pattern_list})
    file(GLOB_RECURSE matched_sources ${pattern})
    list(APPEND expanded_sources ${matched_sources})
  endforeach()
  if(NOT expanded_sources)
    message(WARNING "No source files found matching patterns: ${pattern_list}")
  endif()
  set(${output_var} ${expanded_sources} PARENT_SCOPE)
endfunction()

# Find and configure pkg-config
find_package(PkgConfig QUIET)

# Export package information
include(CMakePackageConfigHelpers)
set(EXPORT_NAME Arcnum)

# Setup installation paths
if(WIN32 AND NOT DEFINED CMAKE_INSTALL_PREFIX)
  set(CMAKE_INSTALL_PREFIX "$ENV{ProgramFiles}/${PROJECT_NAME}")
endif()
include(GNUInstallDirs)


# Workspace dependencies
# Project dependency: Spark
find_package(Spark CONFIG QUIET)
if(NOT Spark_FOUND)
  message(WARNING "Workspace dependency 'Spark' not found. Make sure to build dependencies first.")
  if(DEFINED SPARK_INCLUDE_DIR AND DEFINED SPARK_LIBRARY)
    message(STATUS "Using manual paths for Spark")
    add_library(Spark::Spark STATIC IMPORTED)
    set_target_properties(Spark::Spark PROPERTIES
      IMPORTED_LOCATION "${SPARK_LIBRARY}"
      INTERFACE_INCLUDE_DIRECTORIES "${SPARK_INCLUDE_DIR}"
    )
    set(Spark_FOUND TRUE)
  endif()
else()
  message(STATUS "Workspace dependency 'Spark' found as imported target.")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "bin/${CMAKE_BUILD_TYPE}-windows-x64/Arcnum")
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
# Add preprocessor definitions from build configuration
add_compile_definitions(DEBUG)
add_compile_definitions(_DEBUG)

# Source patterns for target default
set(SOURCE_PATTERNS "src/**")
verify_sources_exist("${SOURCE_PATTERNS}" DEFAULT_SOURCES)
if(NOT DEFAULT_SOURCES)
  # No sources found, using default source
  set(DEFAULT_SOURCES "${CMAKE_SOURCE_DIR}/src/main.cpp")
endif()
add_executable(default ${DEFAULT_SOURCES})
target_include_directories(default PRIVATE "../Spark/include")
target_link_libraries(default PUBLIC Spark::Spark)
# Generate version information header
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/include/version.h
)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)

# Installation
install(TARGETS default DESTINATION bin)

# Packaging with CPack
include(CPack)
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_VENDOR "CBuild User")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} - ${PROJECT_DESCRIPTION}")
if(WIN32)
  set(CPACK_GENERATOR "ZIP;NSIS")
elseif(APPLE)
  set(CPACK_GENERATOR "DragNDrop;TGZ")
else()
  set(CPACK_GENERATOR "TGZ;DEB")
endif()