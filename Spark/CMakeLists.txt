cmake_minimum_required(VERSION 3.15)
project(Spark VERSION 0.1.0)

# Generated by CBuild - Do not edit manually

# Helper function to expand glob patterns and verify sources exist
function(verify_sources_exist pattern_list output_var)
  set(expanded_sources)
  foreach(pattern ${pattern_list})
    file(GLOB_RECURSE matched_sources ${pattern})
    list(APPEND expanded_sources ${matched_sources})
  endforeach()
  if(NOT expanded_sources)
    message(WARNING "No source files found matching patterns: ${pattern_list}")
  endif()
  set(${output_var} ${expanded_sources} PARENT_SCOPE)
endfunction()

# Find and configure pkg-config
find_package(PkgConfig QUIET)

# Export package information
include(CMakePackageConfigHelpers)
set(EXPORT_NAME Spark)

# Setup installation paths
if(WIN32 AND NOT DEFINED CMAKE_INSTALL_PREFIX)
  set(CMAKE_INSTALL_PREFIX "$ENV{ProgramFiles}/${PROJECT_NAME}")
endif()
include(GNUInstallDirs)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "bin/${CMAKE_BUILD_TYPE}-windows-x64/Spark")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "bin/${CMAKE_BUILD_TYPE}-windows-x64/Spark")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "bin/${CMAKE_BUILD_TYPE}-windows-x64/Spark")
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
# Add preprocessor definitions from build configuration
add_compile_definitions(DEBUG)
add_compile_definitions(_DEBUG)

# vcpkg dependencies
find_package(glfw3 CONFIG REQUIRED)
find_package(glew CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)

# Source patterns for target Spark
set(SOURCE_PATTERNS "src/**")
verify_sources_exist("${SOURCE_PATTERNS}" SPARK_SOURCES)
if(NOT SPARK_SOURCES)
  # No sources found, using default source
  set(SPARK_SOURCES "${CMAKE_SOURCE_DIR}/src/main.cpp")
endif()
add_library(Spark SHARED ${SPARK_SOURCES})
target_include_directories(Spark PUBLIC
  "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
  "$<INSTALL_INTERFACE:include>"
)
target_compile_definitions(Spark PRIVATE "NOMINMAX" "WIN32_LEAN_AND_MEAN" "SPARK_EXPORTS")
target_link_libraries(Spark PUBLIC glfw GLEW::GLEW fmt::fmt-header-only opengl32 user32 gdi32 shell32)

# Export targets for use by other projects
add_library(Spark::Spark ALIAS Spark)
export(TARGETS Spark NAMESPACE Spark:: FILE SparkConfig.cmake)
install(TARGETS Spark EXPORT SparkTargets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(DIRECTORY include DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(EXPORT SparkTargets NAMESPACE Spark:: DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Spark)
# Write a basic config file for build tree usage
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/SparkConfig.cmake"
"include(\"${CMAKE_CURRENT_BINARY_DIR}/SparkTargets.cmake\")\n"
"set(SPARK_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\n"
"set(SPARK_FOUND TRUE)\n")
export(PACKAGE Spark)
# Generate version information header
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/include/version.h
)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)

# Packaging with CPack
include(CPack)
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_VENDOR "CBuild User")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} - ${PROJECT_DESCRIPTION}")
if(WIN32)
  set(CPACK_GENERATOR "ZIP;NSIS")
elseif(APPLE)
  set(CPACK_GENERATOR "DragNDrop;TGZ")
else()
  set(CPACK_GENERATOR "TGZ;DEB")
endif()